#pragma checksum "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b55e720a6d1771232999292078984afc6ca6e7bc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__Layout), @"mvc.1.0.view", @"/Views/Shared/_Layout.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Shared/_Layout.cshtml", typeof(AspNetCore.Views_Shared__Layout))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\WORK\Upwork\ETL\ETL\Views\_ViewImports.cshtml"
using ETL;

#line default
#line hidden
#line 2 "D:\WORK\Upwork\ETL\ETL\Views\_ViewImports.cshtml"
using ETL.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b55e720a6d1771232999292078984afc6ca6e7bc", @"/Views/Shared/_Layout.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"992af3a85ca2b0d99cb4e4fdbc51c71fad681f79", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__Layout : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ETL.Models.DataModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ct-navbar.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/jquery.flowchart.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Left Join", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Inner Join", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.flowchart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/ct-navbar.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(29, 37, true);
            WriteLiteral("\r\n<!doctype html>\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(66, 4557, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c6a4d8cb0151417dbc5ff9034f32dd26", async() => {
                BeginContext(72, 106, true);
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\r\n    ");
                EndContext();
                BeginContext(178, 52, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8f39c5824a6c4285b5fdc36c18813b8a", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(230, 76, true);
                WriteLiteral("\r\n    <!--<link href=\"css/pe-icon-7-stroke.css\" rel=\"stylesheet\" />-->\r\n    ");
                EndContext();
                BeginContext(306, 52, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "262d79c9f4c843dca01f42d61bb5d336", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(358, 662, true);
                WriteLiteral(@"
    <!--<link href=""css/modelpopup.css"" rel=""stylesheet"" />-->
    <!--     Font Awesome     -->
    <link href=""https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"" rel=""stylesheet"">
    <!--<link href='https://fonts.googleapis.com/css?family=Grand+Hotel' rel='stylesheet' type='text/css'>-->
    <!--<script src=""https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js""></script>-->

    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css"" integrity=""sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd"" crossorigin=""anonymous"">
    ");
                EndContext();
                BeginContext(1020, 75, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e45e591f5cd3486fb7f6e311d30d97a0", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1095, 1232, true);
                WriteLiteral(@"

    <style>
        /***
        Bootstrap4 Card with Tabs by
        ***/
                .center-div {
            width: 300px;
            height: 300px;
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -150px;
            margin-top: -150px;
        }

        .spinner {
            position: fixed;
            z-index: 999;
            height: 100%;
            width: 100%;
            top: 0;
            left: 0;
            background-color: Black;
            filter: alpha(opacity=60);
            opacity: 0.6;
            -moz-opacity: 0.8;
        }
        .loader {
            margin: auto;
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #15a0ec;
            border-bottom: 16px solid #15a0ec;
            width: 120px;
            height: 120px;
            -webkit-animation: spin 2s linear infinite;
            animation: spin 2s linear infinite;
");
                WriteLiteral("        }\r\n\r\n        .inner-div {\r\n            background-color: white;\r\n            border-radius: 15px;\r\n            margin: auto;\r\n            padding: 2%;\r\n            width: 150px;\r\n        }\r\n\r\n        ");
                EndContext();
                BeginContext(2328, 220, true);
                WriteLiteral("@-webkit-keyframes spin {\r\n            0% {\r\n                -webkit-transform: rotate(0deg);\r\n            }\r\n\r\n            100% {\r\n                -webkit-transform: rotate(360deg);\r\n            }\r\n        }\r\n\r\n        ");
                EndContext();
                BeginContext(2549, 2067, true);
                WriteLiteral(@"@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
        body {
            background-color: #f7f8f9;
        }

        .card {
            background-color: #ffffff;
            border: 1px solid #002233;
            border: 1px solid rgba(0, 34, 51, 0.1);
            box-shadow: 2px 4px 10px 0 #002233, 2px 4px 10px 0 #002233;
            box-shadow: 2px 4px 10px 0 rgba(0, 34, 51, 0.05), 2px 4px 10px 0 rgba(0, 34, 51, 0.05);
            border-radius: 0.15rem;
        }

        /* Tabs Card */

        .tab-card {
            border: 1px solid #eee;
        }

        .tab-card-header {
            background: none;
        }
            /* Default mode */
            .tab-card-header > .nav-tabs {
                border: none;
            }

                .tab-card-header > .nav-tabs > li {
                    margin-right: 2px;
          ");
                WriteLiteral(@"      }

                    .tab-card-header > .nav-tabs > li > a {
                        border: 0;
                        border-bottom: 2px solid transparent;
                        margin-right: 0;
                        color: #737373;
                        padding: 2px 15px;
                    }

                        .tab-card-header > .nav-tabs > li > a.show {
                            border-bottom: 2px solid #007bff;
                            color: #007bff;
                        }

                        .tab-card-header > .nav-tabs > li > a:hover {
                            color: #007bff;
                        }

            .tab-card-header > .tab-content {
                padding-bottom: 0;
            }
    </style>
    <style>
        body {
            background-color: #fafafa;
        }

        .container {
            margin: 150px auto;
        }

        .demo {
            height: 300px;
            margin-bottom: 10px;
        ");
                WriteLiteral("}\r\n    </style>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4623, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(4627, 58799, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "04b0b4e711ec479cb71bc931452366af", async() => {
                BeginContext(4633, 433, true);
                WriteLiteral(@"
    <div id=""navbar-full"">

        <!--
        navbar-default can be changed with navbar-ct-blue navbar-ct-azzure navbar-ct-red navbar-ct-green navbar-ct-orange
        -->
        <nav class=""navbar navbar-ct-blue navbar-fixed-top navbar"" role=""navigation"">

            <div class=""container-fluid"">
                <!--<div class=""col-sm-3"">-->
                <!--<div class=""col-sm-4"">
    <div class=""row"">-->

");
                EndContext();
#line 167 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                 using (Html.BeginForm("NewModel", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {

#line default
#line hidden
                BeginContext(5204, 564, true);
                WriteLiteral(@"                    <ul class=""nav navbar-nav"">
                        <li>
                            <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                                <i class=""fa fa-plus-circle"" aria-hidden=""true""></i>
                                <p>New</p>
                            </a>
                            <ul class=""dropdown-menu"">
                                <button type=""submit"">Start a New Flow</button>
                            </ul>
                        </li>

                    </ul>
");
                EndContext();
#line 181 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                }

#line default
#line hidden
                BeginContext(5787, 2092, true);
                WriteLiteral(@"                <!--</div>-->
                <!--<div class=""row"">-->
                <ul class=""nav navbar-nav"">
                    <li>
                        <a href=""#"">
                            <i class=""fa fa-save""></i>
                            <p>Save</p>
                        </a>
                    </li>

                </ul>
                <!--</div>-->
                <!--</div>-->
                <!--<div class=""col-sm-4"">
    <div id=""row"">-->
                <ul class=""nav navbar-nav"">
                    <li>
                        <a href=""#"">
                            <i class=""fa fa-play-circle""></i>
                            <p>Project Execute</p>
                        </a>
                    </li>

                </ul>
                <!--</div>
    </div>-->
                <!--<div class=""col-sm-4"">
    <div id=""row"">-->


                <ul class=""nav navbar-nav"">
                    <li class="""">
                        <a href=""#");
                WriteLiteral(@""" class=""dropdown-toggle"" data-toggle=""dropdown"">
                            <i class=""fa fa-play""></i>
                            <p>Execute Job</p>
                        </a>
                        <ul class=""dropdown-menu"">
                            <li><a data-toggle=""modal"" data-target=""#sqlserverWindow"" href=""#"">Settings</a></li>
                            <li><a id=""executeJob"" href=""#"">Execute</a></li>
                            <li class=""divider""></li>
                            <li><a href=""#"" id=""validate"">Validate</a></li>
                        </ul>
                    </li>
                </ul>

                <!--</div>
    </div>-->
                <!--</div>-->
                <!--<div class=""col-sm-6"">-->

                <ul class=""nav navbar-nav"">
                    <li class=""dropdown"">
                        <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                            <i class=""fa fa-file-excel-o"" aria-hidden=""true""></i>
 ");
                WriteLiteral("                           <p>Excel</p>  <p>");
                EndContext();
                BeginContext(7880, 22, false);
#line 236 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                                        Write(Model.DbConnection.msg);

#line default
#line hidden
                EndContext();
                BeginContext(7902, 90, true);
                WriteLiteral("</p>\r\n                        </a>\r\n\r\n                        <ul class=\"dropdown-menu\">\r\n");
                EndContext();
#line 240 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                             using (Html.BeginForm("ExcelConnection", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))
                            {

#line default
#line hidden
                BeginContext(8174, 477, true);
                WriteLiteral(@"                                <li><a href=""#"">Browse Excel File in 'Directory D'</a></li>
                                <li>
                                    <div class=""form-group"">
                                        <label class=""form-control-label"" for="""">Email address</label>
                                        <input type=""text"" class=""form-control"" id=""exampleFormControlInput1"" placeholder=""File name"">
                                    </div>
");
                EndContext();
                BeginContext(9052, 237, true);
                WriteLiteral("                                </li>\r\n                                <li class=\"divider\"></li>\r\n                                <li class=\"text-center\"><button type=\"button\" class=\"btn btn-primary\" id=\"excelBtn\">Process</button></li>\r\n");
                EndContext();
#line 255 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                            }

#line default
#line hidden
                BeginContext(9320, 577, true);
                WriteLiteral(@"                        </ul>

                    </li>
                    <li class=""dropdown"" id=""sqlServerLi"">
                        <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                            <i class=""fa fa-database""></i>
                            <p>SQL Server</p>
                        </a>
                        <ul class=""dropdown-menu "">
                            <div style=""width: 600px "" class=""text-center !important"" >
                                <!-- data-toggle=""modal"" data-target=""#sqlserverWindow"" -->
");
                EndContext();
#line 267 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                                 using (Html.BeginForm("SqlServerConnection", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "sqlServerForm" }))
                                {


#line default
#line hidden
                BeginContext(10102, 508, true);
                WriteLiteral(@"                                    <div class=""form-group row cen"">
                                        <label for=""sqlServerServerName"" class=""col-md-4 col-form-label form-control-label"">Server Name</label>
                                        <div class=""col-md-7"">
                                            <input class=""form-control"" type=""text"" placeholder=""Server Name"" id=""sqlServerServerName"">
                                        </div>
                                    </div>
");
                EndContext();
                BeginContext(10612, 1511, true);
                WriteLiteral(@"                                    <div class=""form-group row pl-1"">
                                        <label for=""sqlServerDatabaseName"" class=""col-md-4 col-form-label form-control-label"">Database Name</label>
                                        <div class=""col-md-7"">
                                            <input class=""form-control"" type=""text"" placeholder=""Database Name"" id=""sqlServerDatabaseName"">
                                        </div>
                                    </div>
                                    <div class=""form-group row"">
                                        <label for=""sqlServerUserName"" class=""col-md-4 col-form-label form-control-label"">User Name</label>
                                        <div class=""col-md-7"">
                                            <input class=""form-control"" type=""text"" placeholder=""User Name"" id=""sqlServerUserName"">
                                        </div>
                                    </div>
           ");
                WriteLiteral(@"                         <div class=""form-group row"">
                                        <label for=""sqlServerPassword"" class=""col-md-4 col-form-label form-control-label"">Password</label>
                                        <div class=""col-md-7"">
                                            <input class=""form-control"" type=""password"" placeholder=""Password"" id=""sqlServerPassword"">
                                        </div>
                                    </div>
");
                EndContext();
                BeginContext(12125, 152, true);
                WriteLiteral("                                    <li class=\"text-center\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" id=\"sqlBtn\">Process</button></li>\r\n");
                EndContext();
#line 297 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                                   // <button type="button" class="close" data-dismiss="modal">Create</button>
                                    // <li><a id="sqlBtn" href="#" class="btn">Process</a></li>

#line default
#line hidden
                BeginContext(12486, 63, true);
                WriteLiteral("                                    <li class=\"divider\"></li>\r\n");
                EndContext();
#line 300 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"


                                }

#line default
#line hidden
                BeginContext(12588, 2196, true);
                WriteLiteral(@"                            </div>
                        </ul>
                    </li>

                </ul>
                <!--</div>
    <div class=""col-sm-3 "">-->

                <ul class=""nav navbar-nav"">

                    <li id=""create_source"">
                        <a href=""#"">
                            <i class=""fa fa-connectdevelop""></i>

                            <p>Source</p>
                        </a>
                    </li>
                    <li id=""create_aggregator"">
                        <a href=""#"">
                            <i class=""fa fa-cogs""></i>
                            <p>Aggregator</p>
                        </a>
                    </li>
                    <li id=""create_joiner"">
                        <a href=""#"">
                            <i class=""fa fa-object-group""></i>
                            <p>Joiner</p>
                        </a>
                    </li>
                    <li id=""create_target"">
      ");
                WriteLiteral(@"                  <a href=""#"">
                            <i class=""fa fa-linode""></i>
                            <p>Target</p>
                        </a>
                    </li>
                    <li id=""delete_selected_button"">
                        <a href=""#"">
                            <i class=""fa fa-trash""></i>
                            <p>Delete Selected Operator</p>
                        </a>
                    </li>
                    <li id=""properties_selected_button"">
                        <a href=""#"">
                            <i class=""fa fa-info-circle""></i>                            <p>Operator Properties</p>
                        </a>
                    </li>
                </ul>
                <!--</div>
    </div>-->

                <div class=""spinner"" style=""display:none"">
                    <div class=""center-div"">
                        <div class=""inner-div"">
                            <div class=""loader""></div>
                  ");
                WriteLiteral("      </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </nav>\r\n    </div><!-- /.container-fluid -->\r\n\r\n    ");
                EndContext();
                BeginContext(14785, 12, false);
#line 365 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
Write(RenderBody());

#line default
#line hidden
                EndContext();
                BeginContext(14797, 852, true);
                WriteLiteral(@"
    <div class=""container"">
        <div class=""demo"" id=""example""></div>
        <!--<button class=""btn btn-primary"" id=""create_operator"">Create A New Operator</button>-->
        <!--<button class=""btn btn-danger"" id=""delete_selected_button"">Delete Selected Operator</button>-->
    </div>
    <div class=""container"">
        <div class=""modal fade"" id=""sqlserverWindow"">
            <div class=""modal-dialog"">
                <div class=""modal-content"">
                    <!-- header -->
                    <div class=""modal-header"">
                        <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                        <h3 class=""modal-title"">SQL SERVER</h3>
                    </div>
                    <!-- body -->
                    <div class=""modal-header"">
                        ");
                EndContext();
                BeginContext(15649, 553, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2880c8508d4540a59ca8363533a0a6ab", async() => {
                    BeginContext(15667, 528, true);
                    WriteLiteral(@"
                            <div class=""form-group"">
                                <input type=""email"" class=""form-control"" placeholder=""Server Name"" />
                                <input type=""password"" class=""form-control"" placeholder=""Login"" />
                                <input type=""password"" class=""form-control"" placeholder=""Password"" />
                                <button type=""button"" class=""close"" data-dismiss=""modal"">Create</button>
                            </div>
                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(16202, 672, true);
                WriteLiteral(@"
                    </div>
                    <!-- footer -->
                    s

                </div>
            </div>
        </div>


        <div class=""modal fade"" id=""excelWindow"">
            <div class=""modal-dialog"">
                <div class=""modal-content"">
                    <!-- header -->
                    <div class=""modal-header"">
                        <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                        <h3 class=""modal-title"">Status</h3>
                    </div>
                    <!-- body -->
                    <div class=""modal-header"">
                        ");
                EndContext();
                BeginContext(16874, 141, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "32ba425d94744fae8af790c554bea113", async() => {
                    BeginContext(16892, 116, true);
                    WriteLiteral("\r\n                            <div class=\"form-group\">\r\n                            </div>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(17015, 255, true);
                WriteLiteral("\r\n                    </div>\r\n                    <!-- footer -->\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"modal fade\" id=\"sourcewindow\" role=\"dialog\">\r\n            <div class=\"modal-dialog\">\r\n                ");
                EndContext();
                BeginContext(17271, 32, false);
#line 423 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
           Write(Html.Hidden("SourceOutputFlags"));

#line default
#line hidden
                EndContext();
                BeginContext(17303, 3864, true);
                WriteLiteral(@"
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
                        <h3 class=""modal-title"">Source</h3>
                    </div>
                    <div class=""modal-body"">
                        <h5 class=""text-center"">Table1</h5>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <label for=""connectionList"">Connections</label>
                                <select id=""connectionList""></select>
                            </div>
                            <div class=""col-md-6"">
                                <label for=""sourceTableList"">Table List</label>
                                <select id=""sourceTableList""></select>
                            </div>
                        </div>
                        <table class=""table table-bordered"" id=""s");
                WriteLiteral(@"ourceTable"">
                            <thead>
                                <tr>
                                    <th scope=""col"">Columns</th>
                                    <th scope=""col"">Output</th>

                                </tr>
                            </thead>
                            <tbody id=""sourceTableBody""></tbody>
                        </table>
                        <div class=""form-group"">
                            <input type=""button"" class=""btn btn-warning btn-sm pull-right"" value=""Reset"">
                            <div class=""clearfix""></div>
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-default "" data-dismiss=""modal"">Close</button>
                        <button type=""button"" id=""srcModelSave"" class=""btn btn-primary"" data-dismiss=""modal"">Save Changes</button>
                    </div>

                </div>
        ");
                WriteLiteral(@"        <!-- /.modal-content -->

            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->

        <div class=""modal fade"" id=""targetwindow"" role=""dialog"">
            <div class=""modal-dialog"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
                        <h3 class=""modal-title"">Target</h3>
                    </div>
                    <div class=""modal-body"">
                        <h5 class=""text-center"" id=""target-table"">Table1</h5>
                        <table class=""table table-bordered"">
                            <thead>
                                <tr>
                                    <th scope=""col"">Columns</th>
                                </tr>
                            </thead>
                            <tbody id=""target-table-body""></tbody>
                        </table>
    ");
                WriteLiteral(@"                    <div class=""form-group"">
                            <input type=""button"" class=""btn btn-warning btn-sm pull-right"" value=""Reset"">
                            <div class=""clearfix""></div>
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-default "" data-dismiss=""modal"">Close</button>
                        <button type=""button"" class=""btn btn-primary"" data-dismiss=""modal"">Save Changes</button>
                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>

        <div class=""modal fade"" id=""aggregatorwindow"" role=""dialog"">
            <div class=""modal-dialog"">

");
                EndContext();
#line 501 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                 using (Html.BeginForm("AggregatorSaveChanges", "Home", FormMethod.Post, new { @id = "agrMForm", enctype = "multipart/form-data" }))
                {

                    

#line default
#line hidden
                BeginContext(21359, 54, false);
#line 504 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
               Write(Html.Hidden("AgrOutputFlags", Model.SourceOutputFlags));

#line default
#line hidden
                EndContext();
                BeginContext(21415, 1724, true);
                WriteLiteral(@"                    <div class=""modal-content"">
                        <div class=""modal-header"">
                            <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
                            <h3 class=""modal-title"">Aggregator</h3>
                        </div>
                        <div class=""modal-body"">
                            <h5 class=""text-center"" id=""aggregator-table-name"">Table1</h5>
                            <table class=""table table-bordered"" id=""aggregator-table"">
                                <thead>
                                    <tr>
                                        
                                        <th scope=""col"">Output Columns</th>
                                        <th scope=""col"">GroupBy</th>

                                    </tr>
                                </thead>
                                <tbody id=""aggregator-table-body""></tbody>
                            </table>
   ");
                WriteLiteral(@"                         <div class=""form-group"">
                                <input type=""button"" class=""btn btn-warning btn-sm pull-right"" value=""Reset"">
                                <div class=""clearfix""></div>
                            </div>
                        </div>
                        <div class=""modal-footer"">
                            <button type=""button"" class=""btn btn-default "" data-dismiss=""modal"">Close</button>
                            <button type=""button"" id=""agrModelForm"" class=""btn btn-primary"" data-dismiss=""modal"">Save Changes</button>
                        </div>

                    </div>
                    <!-- /.modal-content -->
");
                EndContext();
#line 535 "D:\WORK\Upwork\ETL\ETL\Views\Shared\_Layout.cshtml"
                }

#line default
#line hidden
                BeginContext(23158, 4159, true);
                WriteLiteral(@"            </div>
            <!-- /.modal-dialog -->
        </div>
        <div class=""modal fade"" id=""joinerwindow"" role=""dialog"">
            <div class=""modal-dialog"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
                        <h3 class=""modal-title"">Joiner</h3>
                    </div>
                    <div class=""modal-body"">
                        <div class=""panel with-nav-tabs panel-primary"">
                            <div class=""panel-heading"">
                                <ul class=""nav nav-tabs"">
                                    <li class=""active""><a href=""#tab1primary"" data-toggle=""tab"">INPUT</a></li>
                                    <li><a href=""#tab2primary"" data-toggle=""tab"">PROPERTIES</a></li>

                                </ul>
                            </div>
                         ");
                WriteLiteral(@"   <div class=""panel-body"">
                                <div class=""tab-content"">
                                    <div class=""tab-pane fade in active"" id=""tab1primary"">
                                        <div class=""row"">
                                            <div class=""col-md-6"">
                                                <h5 class=""text-center"" id=""join-source-1"">Source Table 1</h5>
                                                <table class=""table table-bordered"" id=""join-table-1"">
                                                    <thead>
                                                        <tr>
                                                            <th scope=""col"">Columns</th>
                                                            <th scope=""col"">Output</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody id=""join-sour");
                WriteLiteral(@"ce-1-tb""></tbody>
                                                </table>
                                            </div>
                                            <div class=""col-md-6"">
                                                <h5 class=""text-center"" id=""join-source-2"">Source Table 2</h5>
                                                <table class=""table table-bordered"" id=""join-table-2"">
                                                    <thead>
                                                        <tr>
                                                            <th scope=""col"">Columns</th>
                                                            <th scope=""col"">Output</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id=""join-source-2-tb""></tbody>
                                                </table>
                                   ");
                WriteLiteral(@"         </div>
                                        </div>
                                    </div>
                                    <div class=""tab-pane fade"" id=""tab2primary"">

                                        <div class=""row"">
                                            <div class=""form-group col-md-8"">
                                                <label for=""select-source-1-col"" class=""form-control-label"">Source 1</label>
                                                <select id=""select-source-1-col"" class=""form-control""></select>
                                            </div>
                                        </div>

                                        <div class=""row"">
                                            <div class=""form-group col-md-8"">
                                                <label for=""select-join-type"" class=""form-control-label"">Join Type</label>
                                                <select id=""select-join-type"" class=""form-");
                WriteLiteral("control\">\r\n                                                    ");
                EndContext();
                BeginContext(27317, 37, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bcb8d6972c7f4afeb848d0acdefa80be", async() => {
                    BeginContext(27325, 20, true);
                    WriteLiteral("--Select Join Type--");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(27354, 54, true);
                WriteLiteral("\r\n                                                    ");
                EndContext();
                BeginContext(27408, 44, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bc6890504536486e83fc7e1d16c32fda", async() => {
                    BeginContext(27434, 9, true);
                    WriteLiteral("Left Join");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(27452, 54, true);
                WriteLiteral("\r\n                                                    ");
                EndContext();
                BeginContext(27506, 46, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eba87cf2bad14a099c7c8d5d918dd560", async() => {
                    BeginContext(27533, 10, true);
                    WriteLiteral("Inner Join");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(27552, 1440, true);
                WriteLiteral(@"
                                                </select>
                                            </div>
                                        </div>

                                        <div class=""row"">
                                            <div class=""form-group col-md-8"">
                                                <label for=""select-source-2-col"" class=""form-control-label"">Source 2</label>
                                                <select id=""select-source-2-col"" class=""form-control""></select>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-default "" data-dismiss=""modal"">Close</button>
                        <button type=""button");
                WriteLiteral(@""" id=""joinerModelSave"" class=""btn btn-primary"" data-dismiss=""modal"">Save Changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>


    </div>

    <script src=""https://code.jquery.com/jquery-1.12.2.min.js""></script>
    <script src=""https://code.jquery.com/ui/1.11.4/jquery-ui.min.js""></script>
    ");
                EndContext();
                BeginContext(28992, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a55cee4c1137475a90e9203731055ac9", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(29053, 34366, true);
                WriteLiteral(@"

    <script type=""text/javascript"">

        var activeContainerId = """";
        var source_operatorI = 1;
        var joiner_operatorI = 1;
        var aggregator_operatorI = 1;
        var target_operatorI = 1;
        //----------------Source Model code-----------
        $('#srcModelSave').on('click', function () {
            var x = $('#SourceOutputFlags').val();
            var model = {
                ConnectionName: $('#connectionList').val(),
                SourceOutputFlags: $('#SourceOutputFlags').val(),
                TableName: $('#sourceTableList').val(),
                SourceName: activeContainerId

            }

            $.ajax({
                url: ""Home/SourceSaveChanges"",
                type: ""Post"",
                dataType: ""json"",
                contentType: ""application/json"",
                data: JSON.stringify(model), //if you need to post Model data, use this
                success: function (result) {
                    $(""#partial"").html(");
                WriteLiteral(@"result);
                }
            });
        });
        //---------------Source Table Checkbox Handling--------------
        $('#sourceTable').on('change',
            'input[type=""checkbox""]',
            function (e) {
                var chkVal = $(this).prop('value');
                if (chkVal === 'true') {
                    $(this).prop('value', 'false').removeAttr('checked');
                } else {
                    $(this).prop('value', 'true').prop('checked', 'checked');
                    //$('#sourceTable').find(""[data-id= 0]"").prop('value', 'true').prop('checked', 'checked');
                }
                updateSourceOutputFlag();
            });

        function updateSourceOutputFlag() {
            var checkedAssetIds = [];
            $('#sourceTable input[type=""checkbox""]').each(function (idx, val) {
                if ($(this).prop('checked')) {
                    checkedAssetIds.push($(this).data('id'));
                }
            });
       ");
                WriteLiteral(@"     $('#SourceOutputFlags').val(checkedAssetIds);

        }
        //---------------Source Table Checkbox Handling--------------
        function getTableHeader(connectionName, tableName) {

             //$('.spinner').css('display', 'block');
            $.getJSON('/home/GetTableHeader',
                { connName: connectionName, tableName: tableName, containerId: activeContainerId },
                function (data) {
                   
                    if ($('#connectionList').val() !== '' && $('#sourceTableList').val() !== '') {
                        $('#sourceTableBody').empty();
                        var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                        //alert(data);
                        var trHTML = '';
                        for (var i = 0; i < jsonData.length; i++) //The json object has lenght
                        {
                            var isChecked = ' value = ""false""';
                        ");
                WriteLiteral(@"    if (jsonData[i].OutputFlag === true) {
                                isChecked = ' value = ""true"" checked=""checked""';
                            }

                            trHTML += '<tr>' +
                                '<td>' +
                                jsonData[i].ColumnName +
                                '</td>' +
                                '<td> <div class=""custom-control custom-checkbox""> ' +
                                '<input type=""checkbox"" class=""checkbox sourceRow"" id=""' +
                                jsonData[i].ColumnId +
                                '""  data-id = ""' +
                                jsonData[i].ColumnId +
                                '"" ' + isChecked + '>' +
                                '</div> </td> </tr>';
                        }
                        $('#sourceTableBody').append(trHTML);
                    }

                    
                }).fail(function (jqXHR, textStatus, errorThrown) {
           ");
                WriteLiteral(@"        
                    alert('Error getting tableLists!');
                });

           // $('.spinner').css('display', 'none');
        }

        function getTables(connName, selectedTableName) {
            console.log('Get Table COnnection Calling');
            console.log(selectedTableName);
            $.getJSON('/home/GetTable', { connName: connName }, function (data) {

                $('#sourceTableList option').remove();
                var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                $('#sourceTableList').append('<option>' + '--Select Table Name--' + '</option>');
                if (jsonData !== null) {
                    for (var i = 0; i < jsonData.length; i++) //The json object has lenght
                    {
                        var tabVal = jsonData[i];
                        $('#sourceTableList').append('<option value=' +
                            tabVal + '>' + tabVal + '</option>');
           ");
                WriteLiteral(@"         }
                }
                //Set Selected Value
                if (selectedTableName != '') {
                    $('#sourceTableList').val(selectedTableName);
                    //var ret = $('#sourceTableList').val()
                    console.log(activeContainerId + '-' + selectedTableName);
                }
                return selectedTableName;

            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error getting source table names!');
            });
        }

        function reOpenProperties(TableName) {
            
        }

        function getConnection() {
            $.getJSON('/home/GetConnections', { containerId: activeContainerId }, function (data) {
                //-----------Set Source Window Config-----------
				
                $('#connectionList option').remove();
                $('#sourceTableList option').remove();
                $('#sourceTableBody').empty();
                console.log('Connecti");
                WriteLiteral(@"on Calling');
                var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                var conn = jsonData.Connection;
                var sourceModel = jsonData.SourceModel;
                $('#connectionList').append('<option >' + '--Select Connection Name--' + '</option>');
                for (var i = 0; i < conn.length; i++) //The json object has lenght
                {
                    //conn[i]; //You are in the current object
                    $('#connectionList').append('<option value=' +
                        conn[i] + '>' + conn[i] + '</option>');
                }
                //Set default value
                $('#sourceTableList option').remove();
                $('#sourceTableList').append('<option>' + '--Select Table Name--' + '</option>');
                //-----------Set Source Window Config-----------
                if (sourceModel.TableName != '') {
                    $('#connectionList').val(sourceModel.Connec");
                WriteLiteral(@"tionName);
                    
                    console.log(sourceModel.ConnectionName + '--' + sourceModel.TableName);
                    let res = getTables($('#connectionList').val(), sourceModel.TableName);
                    console.log(res);
                      
                    getTableHeader($('#connectionList').val(), sourceModel.TableName);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error getting categories!');
            });
        }

        $('#connectionList').on('change',
            function () {
                $('#tableList option').empty();
                $('#sourceTableBody').empty();
                console.log('Connection List Change');
                //--------------Table Names--------------
                getTables($('#connectionList').val(), '');
                //--------------Table Names--------------
            });

        $('#sourceTableList').on('change',
            function (");
                WriteLiteral(@") {
                //$('#tableList option').empty();
                //--------------Table Header--------------
                getTableHeader($('#connectionList').val(), $('#sourceTableList').val());
                //--------------Table Header--------------
            });

        $('#create_source').click(function () {
            var operatorId = 'source_' + source_operatorI;
            var operatorData = {
                top: 60,
                left: 500,
                properties: {
                    title: 'Source',
                  //  inputs: {
                   //     input_1: {
                   //         label: 'Input 1',
                   //     }
               //     },
                    outputs: {
                        output_1: {
                            label: 'Output 1',
                        }
                    }
                }
            };
            source_operatorI++;
            $('#example').flowchart('createOperator', operatorI");
                WriteLiteral(@"d, operatorData);
            var source = ""source"";
            updateContainerVal(source, operatorId);
        });
        //----------------Source Model code-----------

        //----------------Aggregator Model code-----------
        $('#agrModelForm').on('click', function () {
            //AggregatorSaveChanges
            var x = $('#AgrOutputFlags').val();
            var model = {
                //ConnectionName: $('#connectionList').val(),
                SourceOutputFlags: $('#AgrOutputFlags').val(),
                //TableName: $('#sourceTableList').val(),
                SourceName: activeContainerId

            }

            $.ajax({
                url: ""Home/AggregatorSaveChanges"",
                type: ""Post"",
                dataType: ""json"",
                contentType: ""application/json"",
                data: JSON.stringify(model), //if you need to post Model data, use this
                success: function (result) {
                    $(""#partial"").html(re");
                WriteLiteral(@"sult);
                }
            });
        });
        function aggregatorSettings(activeContainerId) {
            $.getJSON('/home/AggregatorSettings', { containerId: activeContainerId }, function (data) {
                var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                var sourceModel = jsonData.SourceModel;
                var inputModel = jsonData.InputModel;
                var isChecked = '';
                $('#aggregator-table-name').empty();
                $('#aggregator-table-name').text(sourceModel.ConnectionName + ' -> ' + sourceModel.TableName);

                $('#aggregator-table-body').empty();
                var trHTML = '';
                var names = [];
                for (var i = 0; i < inputModel.length; i++) //The json object has lenght
                {
                    isChecked = ' value = ""false"" disabled=""disabled""';
                    if (inputModel[i].OutputFlag === true) {
               ");
                WriteLiteral(@"         isChecked = ' value = ""true"" checked=""checked"" ';
                        
                    }
                    trHTML += '<tr>' + '<td >' +
                        inputModel[i].ColumnName +
                        '</td>' +
                        '<td > <div class=""custom-control custom-checkbox""> ' +
                        '<input type=""checkbox"" class=""checkbox"" ' + isChecked + ' id = ""' +
                        inputModel[i].ColumnId +
                        '""  data-id = ""' +
                        inputModel[i].ColumnId +
                        '"" >'
                             ' </tr>';
                    /*<!-- outCol = '<td >' +
                        inputModel[i].ColumnName +
                        '</td>' +
                        '<td > <div class=""custom-control custom-checkbox""> ' +
                        '<input type=""checkbox"" class=""checkbox"" ' + isChecked + ' id = ""' +
                        inputModel[i].ColumnId +
                        '""  d");
                WriteLiteral(@"ata-id = ""' +
                        inputModel[i].ColumnId +
                        '"" >';
                    names.push(outCol);
                    outCol = ''; */

                }
                /*for (var i = 0, j = 0; i < sourceModel.InputModel.length; i++ , j++) //The json object has lenght
                {
                    isChecked = ' value = ""false""';
                    if (sourceModel.InputModel[i].OutputFlag === true) {
                        isChecked = ' value = ""true"" checked=""checked"" ';
                    }
                    if (!j < names.length) {
                        outCol = '';
                    }
                    trHTML += '<tr>' +
                        '<td>' +
                        sourceModel.InputModel[i].ColumnName +
                        '</td>' +
                        '<td> <div class=""custom-control custom-checkbox""> ' +
                        '<input type=""checkbox"" class=""checkbox "" disabled ' + isChecked + ' >' +
        ");
                WriteLiteral(@"                '</div> </td> ' + names[j] + ' </tr>';
                }*/
                $('#aggregator-table-body').append(trHTML);


            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error getting aggregation settings!');
            });
        }

        //---------------Aggregator Checkbox Handling--------------
        $('#aggregator-table').on('change',
            'input[type=""checkbox""]',
            function (e) {
                var chkVal = $(this).prop('value');
                //find(""[data-id= 0]"").prop('value');
                if (chkVal === 'true') {
                    $(this).prop('value', 'false').removeAttr('checked');
                } else {
                    $(this).prop('value', 'true').prop('checked', 'checked');
                    //$('#sourceTable').find(""[data-id= 0]"").prop('value', 'true').prop('checked', 'checked');
                }
                updateAggregatorOutputFlag();
            });

        function");
                WriteLiteral(@" updateAggregatorOutputFlag() {
            var checkAggregatorIds = [];
            $('#aggregator-table input[type=""checkbox""]').each(function (idx, val) {
                if ($('#myCheckbox').is(':disabled')) {

                }
                else if ($(this).prop('checked')) {
                    checkAggregatorIds.push($(this).data('id'));
                }
            });

            $('#AgrOutputFlags').val(checkAggregatorIds);
            
        }

        //---------------Aggregator Checkbox Handling--------------
        $('#create_aggregator').click(function () {
            var operatorId = 'aggregator_' + aggregator_operatorI;
            var operatorData = {
                top: 60,
                left: 500,
                properties: {
                    title: 'aggregator',
                    inputs: {
                        input_1: {
                            label: 'Input 1',
                        }
                    },
                    output");
                WriteLiteral(@"s: {
                        output_1: {
                            label: 'Output 1',
                        }
                    }
                }
            };

            aggregator_operatorI++;

            $('#example').flowchart('createOperator', operatorId, operatorData);
            var source = ""aggregator"";
            //alert(source + ' - ' + operatorId);
            updateContainerVal(source, operatorId);
        });
        //----------------Aggregator Model code-----------

        //----------------Join Model code-----------
        function joinerSettings(active) {
            $.getJSON('/home/JoinerSettings', { containerId: active }, function (data) {
                var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                var sourceModel1 = jsonData.SourceModel1;
                var sourceModel2 = jsonData.SourceModel2;
                var srcMod1SelCol = jsonData.SourceModel1SelectedColumn;
                var ");
                WriteLiteral(@"srcMod2SelCol = jsonData.SourceModel2SelectedColumn;
                var joinType = jsonData.JoinType;
                //$('#').empty();
                //$('#aggregator-table-name').text(sourceModel.ConnectionName + ' -> ' + sourceModel.TableName);

                $('#join-source-1-tb').empty();
                $('#join-source-2-tb').empty();
                $('#select-source-1-col').empty();
                $('#select-source-2-col').empty();
                $('#select-join-type').val('');
                //Set source 1
                $('#select-source-1-col').append('<option >' + '--Select Column Name--' + '</option>');
                $('#select-source-2-col').append('<option >' + '--Select Column Name--' + '</option>');

                var trHtml = '';
                var i = '';
                var isChecked = '';
                for (i = 0; i < sourceModel1.InputModel.length; i++) //The json object has length
                {
                    isChecked = ' value = ""false"" ';
 ");
                WriteLiteral(@"                   if (sourceModel1.InputModel[i].OutputFlag === true) {
                        isChecked = ' value = ""true"" checked = ""checked"" ';
                        $('#select-source-1-col').append('<option value = ""' + sourceModel1.InputModel[i].ColumnName + '"" > ' + sourceModel1.InputModel[i].ColumnName + '</option>');
                    }
                    trHtml += '<tr>' +
                        '<td>' +
                        sourceModel1.InputModel[i].ColumnName +
                        '</td>' +
                        '<td> <div class=""custom-control custom-checkbox""> ' +
                        '<input type=""checkbox"" class=""checkbox "" disabled  ' + isChecked + ' >' +
                        '</div> </td> </tr>';
                }
                $('#join-source-1-tb').append(trHtml);
                $('#select-source-1-col').val(srcMod1SelCol);
                //Set source 2
                trHtml = '';
                for (i = 0; i < sourceModel2.InputModel.length; i+");
                WriteLiteral(@"+) //The json object has lenght
                {
                    isChecked = ' value = ""false""';
                    if (sourceModel2.InputModel[i].OutputFlag === true) {
                        isChecked = ' value = ""true"" checked=""checked"" ';
                        $('#select-source-2-col').append('<option value = ""' + sourceModel2.InputModel[i].ColumnName + '"" > ' + sourceModel2.InputModel[i].ColumnName + '</option>');
                    }
                    trHtml += '<tr>' +
                        '<td>' +
                        sourceModel2.InputModel[i].ColumnName +
                        '</td>' +
                        '<td> <div class=""custom-control custom-checkbox""> ' +
                        '<input type=""checkbox"" class=""checkbox "" disabled ' + isChecked + ' >' +
                        '</div> </td> </tr>';
                }
                $('#join-source-2-tb').append(trHtml);
                $('#select-source-2-col').val(srcMod2SelCol);


            }).fail(f");
                WriteLiteral(@"unction (jqXHR, textStatus, errorThrown) {
                alert('Error getting aggregation settings!');
            });
        }

        $('#joinerModelSave').on('click', function () {
            var model = {
                SourceModel1SelectedColumn: $('#select-source-1-col').val(),
                SourceModel2SelectedColumn: $('#select-source-2-col').val(),
                JoinName: activeContainerId,
                JoinType: $('#select-join-type').val()
            }

            $.ajax({
                url: ""Home/JoinerSaveChanges"",
                type: ""Post"",
                dataType: ""json"",
                contentType: ""application/json"",
                data: JSON.stringify(model), //if you need to post Model data, use this
                success: function (result) {
                    $(""#partial"").html(result);
                }
            });
        });
        $('#create_joiner').click(function () {
            var operatorId = 'joiner_' + joiner_operatorI;
");
                WriteLiteral(@"            var operatorData = {
                top: 60,
                left: 500,
                properties: {
                    title: 'Joiner',
                    inputs: {
                        input_1: {
                            label: 'Input 1',
                        },
                        input_2: {
                            label: 'Input 2',
                        },
                    },
                    outputs: {
                        output_1: {
                            label: 'Output 1',
                        }
                    }
                }
            };

            joiner_operatorI++;

            $('#example').flowchart('createOperator', operatorId, operatorData);
            var source = ""joiner"";
            //alert(source + ' - ' + operatorId);
            updateContainerVal(source, operatorId);
        });
        //----------------Join Model code-----------

        //----------------Target Model code-----------
    ");
                WriteLiteral(@"    function targetSettings(activeContainerId) {
            $.getJSON('/home/TargetSettings', { containerId: activeContainerId }, function (data) {
                var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json

                $('#target-table-body').empty();

                var joinModel = jsonData.JoinModel;
                var agrModel = jsonData.AggregatorModel;
                var connectedFrom = jsonData.ConnectedFrom;
                var inputModel = jsonData.InputModel;
                var obj = '';
                var trHtml = '';
                var i = 0;
                if (connectedFrom.includes(""joiner"")) {
                    
                    trHtml = '';
                    for (i = 0; i < inputModel.length; i++) //The json object has length
                    {
                        trHtml += '<tr>' +
                            '<td>' +
                            inputModel[i].ColumnName +
                            ");
                WriteLiteral(@"'</td> </tr>';
                    }
                    $('#target-table-body').append(trHtml);
                    /*trHtml = '';
                    for (i = 0; i < joinModel.SourceModel2.InputModel.length; i++) //The json object has length
                    {
                        trHtml += '<tr>' +
                            '<td>' +
                            joinModel.SourceModel2.InputModel[i].ColumnName +
                            '</td> </tr>';
                    }
                    $('#target-table-body').append(trHtml);*/
                } else if (connectedFrom.includes(""aggregator"")) {
                    obj = agrModel;
                    trHtml = '';
                    for (i = 0; i < agrModel.InputModel.length; i++) //The json object has lenght
                    {
                        if (agrModel.InputModel[i].OutputFlag === true) {
                            trHtml += '<tr>' +
                                '<td>' +
                                agr");
                WriteLiteral(@"Model.InputModel[i].ColumnName + '</td> </tr>';
                        }

                    }
                    $('#target-table-body').append(trHtml);
                }


            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error getting aggregation settings!');
            });
        }

        $('#create_target').click(function () {
            var operatorId = 'target_' + target_operatorI;
            var operatorData = {
                top: 60,
                left: 500,
                properties: {
                    title: 'target',
                    inputs: {
                        input_1: {
                            label: 'Input 1',
                        }
                    }
                }
            };

            target_operatorI++;

            $('#example').flowchart('createOperator', operatorId, operatorData);
            var source = ""target"";
            //alert(source + ' - ' + operatorId);
          ");
                WriteLiteral(@"  updateContainerVal(source, operatorId);
        });
        //----------------Target Model code-----------

        //----------------Common---------------------
        function updateContainerVal(containerName, containerId) {
            $.getJSON('/home/UpdateContainerVal', { container: containerName, contId: containerId }, function (data) {
                //var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json
                //$('#connectionList').append('<option >' + '--Select Connection Name--' + '</option>');
                //for (var i = 0; i < jsonData.length; i++) //The json object has lenght
                //{
                //    jsonData[i]; //You are in the current object
                //    $('#connectionList').append('<option value=' +
                //        jsonData[i] + '>' + jsonData[i] + '</option>');
                //}

            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error setting New ");
                WriteLiteral(@"Container!');
            });
        }

        $(document).ready(function () {
            // Dropdown list change event.
            var data = {
                operators: {
                    operator1: {
                        top: 20,
                        left: 20,
                        properties: {
                            title: 'Operator 1',
                            inputs: {},
                            outputs: {
                                output_1: {
                                    label: 'Output 1',
                                }
                            }
                        }
                    },
                    operator2: {
                        top: 80,
                        left: 300,
                        properties: {
                            title: 'Operator 2',
                            inputs: {
                                input_1: {
                                    label: 'Input 1',
                ");
                WriteLiteral(@"                },
                                input_2: {
                                    label: 'Input 2',
                                },
                            },
                            outputs: {}
                        }
                    },
                }
            };
            // Apply the plugin on a standard, empty div...
            $('#example').flowchart({
                //data: data
            });
        });
        var operatorI = 0;
        $('#create_operator').click(function () {
            var operatorId = 'created_operator_' + operatorI;
            var operatorData = {
                top: 60,
                left: 500,
                properties: {
                    title: 'Operator ' + (operatorI + 3),
                    inputs: {
                        input_1: {
                            label: 'Input 1',
                        }
                    },
                    outputs: {
                        output_1:");
                WriteLiteral(@" {
                            label: 'Output 1',
                        }
                    }
                }
            };

            operatorI++;

            $('#example').flowchart('createOperator', operatorId, operatorData);
        });
        $('#delete_selected_button').click(function () {
            $('#example').flowchart('deleteSelected');
        });

        $('#delete_selected_button').click(function () {
            $('#example').flowchart('deleteSelected');
        });
        $('#properties_selected_button').click(function () {
            $('#example').flowchart('propertiesSelected');
        });

        function getOperatorlinkdata(linkdata) {
            var operatorlinkdata = linkdata;
            var fromOperator = operatorlinkdata[""fromOperator""];
            var toOperator = operatorlinkdata[""toOperator""];
            $.getJSON('/home/UpdateContainerLinks', { fromContainer: fromOperator, toContainer: toOperator }, function (data) {
                ");
                WriteLiteral(@"//var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json


            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error setting New Container!');
            });
            console.log(linkdata);
        }

        function propertiesOperator(id) {
            var operatorid = id;
            var node_title = id.substr(0, id.indexOf('_'));
            activeContainerId = operatorid;
            if (node_title == 'source') {
                
                $(""#sourcewindow"").modal();
                //--------------Connection Names--------------
                //set source model values
                getConnection();
                //--------------Connection Names--------------
                //updateSourceOutputFlag();
            }
            if (node_title == 'joiner') {
                joinerSettings(activeContainerId);
                $(""#joinerwindow"").modal();
            }

            if (node_title ==");
                WriteLiteral(@" 'aggregator') {
                //set aggregator model values
                aggregatorSettings(activeContainerId);
                $(""#aggregatorwindow"").modal();
            }
            if (node_title == 'target') {
                targetSettings(activeContainerId);
                $(""#targetwindow"").modal();
            }

        }

        $('#newBtn').on('click',
            function () {
                $.ajax({
                    url: ""Home/NewModel"",
                    type: ""Post"",
                    success: function (result) {
                        $(""#partial"").html(result);
                    }
                });

            });
        $('#excelBtn').on('click',
            function () {
                $.ajax({
                    url: ""Home/ExcelConnection"",
                    type: ""Post"",
                    data: $(""form"").serialize(), //if you need to post Model data, use this
                    success: function (result) {
                     ");
                WriteLiteral(@"   $(""#partial"").html(result);
                    }
                });
            });
            $('#executeJob').on('click',
                function () {
                $('.spinner').css('display', 'block');
                $.ajax({
                    url: ""Home/ExecuteJob"",
                    type: ""Post"",
                    data: $(""form"").serialize(), //if you need to post Model data, use this
                    success: function (result) {

                        if (result == null) {
                            $(""#partial"").html(result);
                            $('.spinner').css('display', 'none');
                        }
                        else {
                            $('.spinner').css('display', 'none');
                            alert(result);
                        }
                    },
                    failure: function (result) {
                    $('.spinner').css('display', 'none');
                        alert('mapping is failed')");
                WriteLiteral(@";
                }
                });
            });

        $('#sqlBtn').on('click',
            function () {
                $('.spinner').css('display', 'block');

                if (document.getElementById(""sqlServerLi"").classList.contains('dropdown'))
                document.getElementById(""sqlServerLi"").classList.toggle('dropdown');
                var model = {
                ServerName: $('#sqlServerServerName').val(),
                DbName: $('#sqlServerDatabaseName').val(),
                UserName: $('#sqlServerUserName').val(),
                Password: $('#sqlServerPassword').val()
            }
            $.ajax({
                url: ""Home/SqlServerConnection"",
                type: ""Post"",
                dataType: ""json"",
                contentType: ""application/json"",
                data: JSON.stringify(model), //if you need to post Model data, use this
                success: function (result) {
                    if (result === ""Failure"") {
          ");
                WriteLiteral(@"              $('.spinner').css('display', 'none');
                        alert(""Connection to SQL Server Failed"");
                         
                    }
                    else{
                       // $(""#sqlServerLi"").removeClass(""open"");
                        $(""#partial"").html(result);
                         $('.spinner').css('display', 'none');
                    }

                },
                failure: function (result) {
                    $('.spinner').css('display', 'none');
                        alert('Failed');
                }

                
            });
                
            });



           $('#validate').on('click',
            function () {
                $('.spinner').css('display', 'block');
            $.ajax({
                url: ""Home/Validate"",
                type: ""Post"",
                dataType: ""json"",
                contentType: ""application/json"",
              //  data: JSON.stringify(model), //if you ");
                WriteLiteral(@"need to post Model data, use this
                success: function (result) {
                   
                    $('.spinner').css('display', 'none');
                    alert(result);    
                   

                },
                failure: function(result){
                    alert('Failed');
                    $('.spinner').css('display', 'none');
                }

                
            });
                
            });


                                //----------------Common---------------------
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(63426, 1884, true);
            WriteLiteral(@"

</html>

<script type=""text/javascript"">

                            //$(""#excel"").click(function () {
                            //    $.ajax({
                            //        url: ""Home/ExcelConnection"",
                            //        type: ""Post"",
                            //        data: $(""form"").serialize(), //if you need to post Model data, use this
                            //        success: function (result) {
                            //            $(""#partial"").html(result);
                            //        }
                            //    });
                            //    $.getJSON('/home/GetConnections', null, function (data) {
                            //        var jsonData = jQuery.parseJSON(JSON.stringify(data)); //This converts the string to json

                            //        var sourceModel = jsonData.SourceModel;
                            //        var conn = jsonData.Connection;
                            //        $('#");
            WriteLiteral(@"connectionList').empty();
                            //        $('#connectionList').append('<option >' + '--Select Connection Name--' + '</option>');
                            //        for (var i = 0; i < conn.length; i++) //The json object has lenght
                            //        {
                            //            conn[i]; //You are in the current object
                            //            $('#connectionList').append('<option value=' +
                            //                jsonData[i] + '>' + jsonData[i] + '</option>');
                            //        }

                            //    }).fail(function (jqXHR, textStatus, errorThrown) {
                            //        alert('Error getting Connections!');
                            //    });
                            //});
</script>
");
            EndContext();
            BeginContext(65310, 64, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b85b1257bfe844b6848a02580e65fb1f", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65374, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(65376, 41, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a2f6d2c4e5a7427f8415ee1e7eba9ff6", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65417, 10, true);
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ETL.Models.DataModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
